# src/config.py
"""
Centralised configuration loader for the scalper bot.
Reads environment variables at import time and exposes them via the `Config` class.
"""

import os
from pathlib import Path

# Load .env if present
try:
    from dotenv import load_dotenv
    env_path = Path(__file__).parent.parent / ".env"
    if env_path.exists():
        load_dotenv(dotenv_path=env_path)
        print(f"Loaded environment from {env_path}")
    else:
        print("No .env found at:", env_path)
except Exception as exc:
    print(f"dotenv not used: {exc}")


def _as_bool(val: str, default: bool = False) -> bool:
    if val is None:
        return default
    return str(val).strip().lower() in ("1", "true", "yes", "y", "on")


class Config:
    """Static configuration values pulled from environment variables."""

    # ─────────── Zerodha ─────────── #
    ZERODHA_API_KEY: str = os.getenv("ZERODHA_API_KEY", "")
    ZERODHA_API_SECRET: str = os.getenv("ZERODHA_API_SECRET", "")
    # Access token var name unified across project:
    KITE_ACCESS_TOKEN: str = os.getenv("KITE_ACCESS_TOKEN", "")
    # Back-compat (if someone sets ZERODHA_ACCESS_TOKEN)
    if not KITE_ACCESS_TOKEN and os.getenv("ZERODHA_ACCESS_TOKEN"):
        KITE_ACCESS_TOKEN = os.getenv("ZERODHA_ACCESS_TOKEN", "")

    # ─────────── Telegram ─────────── #
    TELEGRAM_BOT_TOKEN: str = os.getenv("TELEGRAM_BOT_TOKEN", "")
    try:
        TELEGRAM_CHAT_ID: int = int(os.getenv("TELEGRAM_CHAT_ID", "0"))
    except Exception:
        TELEGRAM_CHAT_ID = 0

    # ─────────── Risk & Money Mgmt ─────────── #
    RISK_PER_TRADE: float = float(os.getenv("RISK_PER_TRADE", "0.01"))
    MAX_DRAWDOWN: float = float(os.getenv("MAX_DRAWDOWN", "0.05"))
    CONSECUTIVE_LOSS_LIMIT: int = int(os.getenv("CONSECUTIVE_LOSS_LIMIT", "3"))

    # Daily circuit breaker (amount OR pct). If both provided, stricter is used.
    DAILY_MAX_LOSS_PCT: float = float(os.getenv("DAILY_MAX_LOSS_PCT", "0.05"))  # 5% of equity
    DAILY_MAX_LOSS_AMOUNT: float = float(os.getenv("DAILY_MAX_LOSS_AMOUNT", "0"))  # 0=disabled
    HALT_ON_DRAWDOWN: bool = _as_bool(os.getenv("HALT_ON_DRAWDOWN", "true"))

    # ─────────── Strategy Tuning ─────────── #
    BASE_STOP_LOSS_POINTS: float = float(os.getenv("BASE_STOP_LOSS_POINTS", "20.0"))
    BASE_TARGET_POINTS: float = float(os.getenv("BASE_TARGET_POINTS", "40.0"))
    CONFIDENCE_THRESHOLD: float = float(os.getenv("CONFIDENCE_THRESHOLD", "8.0"))
    MIN_SIGNAL_SCORE: float = float(os.getenv("MIN_SIGNAL_SCORE", "7.0"))

    TIME_FILTER_START: str = os.getenv("TIME_FILTER_START", "09:15")
    TIME_FILTER_END: str = os.getenv("TIME_FILTER_END", "15:15")
    SKIP_FIRST_MIN: int = int(os.getenv("SKIP_FIRST_MIN", "10"))  # warmup ignore

    # ATR-based adaptive SL/TP
    ATR_SL_MULTIPLIER: float = float(os.getenv("ATR_SL_MULTIPLIER", "1.5"))
    ATR_TP_MULTIPLIER: float = float(os.getenv("ATR_TP_MULTIPLIER", "3.0"))
    ATR_PERIOD: int = int(os.getenv("ATR_PERIOD", "14"))
    ATR_LOOKBACK_MIN: int = int(os.getenv("ATR_LOOKBACK_MIN", "30"))

    # Confidence-based adjustments
    SL_CONFIDENCE_ADJ: float = float(os.getenv("SL_CONFIDENCE_ADJ", "0.2"))
    TP_CONFIDENCE_ADJ: float = float(os.getenv("TP_CONFIDENCE_ADJ", "0.3"))

    # ─────────── Instrument / Trading ─────────── #
    NIFTY_LOT_SIZE: int = int(os.getenv("NIFTY_LOT_SIZE", "75"))
    MIN_LOTS: int = int(os.getenv("MIN_LOTS", "1"))
    MAX_LOTS: int = int(os.getenv("MAX_LOTS", "5"))

    TRADE_SYMBOL: str = os.getenv("TRADE_SYMBOL", "NIFTY")
    TRADE_EXCHANGE: str = os.getenv("TRADE_EXCHANGE", "NFO")
    INSTRUMENT_TOKEN: int = int(os.getenv("INSTRUMENT_TOKEN", "256265"))

    # Options specifics
    SPOT_SYMBOL: str = os.getenv("SPOT_SYMBOL", "NSE:NIFTY 50")
    OPTION_TYPE: str = os.getenv("OPTION_TYPE", "BOTH")  # CE, PE, BOTH
    STRIKE_SELECTION_TYPE: str = os.getenv("STRIKE_SELECTION_TYPE", "ATM")
    STRIKE_RANGE: int = int(os.getenv("STRIKE_RANGE", "3"))
    DATA_LOOKBACK_MINUTES: int = int(os.getenv("DATA_LOOKBACK_MINUTES", "35"))

    OPTION_SL_PERCENT: float = float(os.getenv("OPTION_SL_PERCENT", "0.05"))
    OPTION_TP_PERCENT: float = float(os.getenv("OPTION_TP_PERCENT", "0.15"))
    OPTION_BREAKOUT_PCT: float = float(os.getenv("OPTION_BREAKOUT_PCT", "0.01"))
    OPTION_SPOT_TREND_PCT: float = float(os.getenv("OPTION_SPOT_TREND_PCT", "0.005"))

    # Quotes / microstructure
    SPREAD_GUARD_MAX_PCT: float = float(os.getenv("SPREAD_GUARD_MAX_PCT", "0.7"))  # e.g., 0.7% max spread of mid
    MAX_CONCURRENT_POSITIONS: int = int(os.getenv("MAX_CONCURRENT_POSITIONS", "1"))

    # Slippage & fees
    SLIPPAGE_BPS: float = float(os.getenv("SLIPPAGE_BPS", "5"))  # 5 bps = 0.05%
    FEES_PCT_PER_SIDE: float = float(os.getenv("FEES_PCT_PER_SIDE", "0.03"))  # 0.03% per side (example)

    # Scheduling / rate limit
    JITTER_SECONDS_MAX: float = float(os.getenv("JITTER_SECONDS_MAX", "2.0"))
    BALANCE_LOG_INTERVAL_MIN: int = int(os.getenv("BALANCE_LOG_INTERVAL_MIN", "30"))

    # Order-exit preferences
    DEFAULT_PRODUCT: str = os.getenv("DEFAULT_PRODUCT", "MIS")
    DEFAULT_ORDER_TYPE: str = os.getenv("DEFAULT_ORDER_TYPE", "MARKET")
    DEFAULT_VALIDITY: str = os.getenv("DEFAULT_VALIDITY", "DAY")
    PREFERRED_EXIT_MODE: str = os.getenv("PREFERRED_EXIT_MODE", "AUTO")  # AUTO | GTT | REGULAR
    TICK_SIZE: float = float(os.getenv("TICK_SIZE", "0.05"))
    TRAIL_COOLDOWN_SEC: float = float(os.getenv("TRAIL_COOLDOWN_SEC", "12.0"))

    # ─────────── NEW: Partial TP + Breakeven hop + Hard Stop ─────────── #
    # Partial take profit
    PARTIAL_TP_ENABLE: bool = _as_bool(os.getenv("PARTIAL_TP_ENABLE", "true"))
    PARTIAL_TP_RATIO: float = float(os.getenv("PARTIAL_TP_RATIO", "0.5"))  # fraction at TP1 (0–1)
    PARTIAL_TP_USE_MIDPOINT: bool = _as_bool(os.getenv("PARTIAL_TP_USE_MIDPOINT", "true"))
    PARTIAL_TP2_R_MULT: float = float(os.getenv("PARTIAL_TP2_R_MULT", "2.0"))  # only if not using midpoint

    # Move SL to breakeven after TP1
    BREAKEVEN_AFTER_TP1_ENABLE: bool = _as_bool(os.getenv("BREAKEVEN_AFTER_TP1_ENABLE", "true"))
    BREAKEVEN_OFFSET_TICKS: int = int(os.getenv("BREAKEVEN_OFFSET_TICKS", "1"))

    # Hard stop safeguard
    HARD_STOP_ENABLE: bool = _as_bool(os.getenv("HARD_STOP_ENABLE", "true"))
    HARD_STOP_GRACE_SEC: float = float(os.getenv("HARD_STOP_GRACE_SEC", "3.0"))
    HARD_STOP_SLIPPAGE_BPS: float = float(os.getenv("HARD_STOP_SLIPPAGE_BPS", "5"))

    # Feature toggles
    ENABLE_LIVE_TRADING: bool = _as_bool(os.getenv("ENABLE_LIVE_TRADING", "false"))
    ENABLE_TELEGRAM: bool = _as_bool(os.getenv("ENABLE_TELEGRAM", "true"))
    ALLOW_OFFHOURS_TESTING: bool = _as_bool(os.getenv("ALLOW_OFFHOURS_TESTING", "false"))

    # Logging / persistence
    LOG_FILE: str = os.getenv("LOG_FILE", "logs/trades.csv")

    # Historical data timeframe
    HISTORICAL_TIMEFRAME: str = os.getenv("HISTORICAL_TIMEFRAME", "minute")

    # Session management
    SESSION_AUTO_EXIT_TIME: str = os.getenv("SESSION_AUTO_EXIT_TIME", "15:20")  # HH:MM IST


if __name__ == "__main__":
    import pprint
    print("Final Config:")
    pprint.pprint({
        k: v for k, v in settings.__dict__.items()
        if not k.startswith("__") and not callable(v)
    })
